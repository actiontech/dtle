basePath: /
definitions:
  common.JobListItemV2:
    properties:
      allocation_status:
        additionalProperties:
          type: string
        type: object
      dst_addr_list:
        items:
          type: string
        type: array
      dst_database_type:
        type: string
      job_create_time:
        type: string
      job_id:
        type: string
      job_status:
        type: string
      job_steps:
        items:
          $ref: '#/definitions/common.JobStep'
        type: array
      src_addr_list:
        items:
          type: string
        type: array
      src_database_type:
        type: string
      topic:
        type: string
      user:
        type: string
    type: object
  common.JobStep:
    properties:
      job_create_time:
        type: string
      step_name:
        type: string
      step_schedule:
        type: number
      step_status:
        type: string
    type: object
  common.Role:
    properties:
      authority:
        type: string
      name:
        type: string
      object_type:
        type: string
      object_users:
        items:
          type: string
        type: array
      tenant:
        type: string
    type: object
  common.User:
    properties:
      create_time:
        type: string
      password:
        type: string
      remark:
        type: string
      role:
        type: string
      tenant:
        type: string
      username:
        type: string
    type: object
  models.BasicTaskProfile:
    properties:
      configuration:
        $ref: '#/definitions/models.Configuration'
      connection_info:
        $ref: '#/definitions/models.ConnectionInfo'
      dtle_node_infos:
        items:
          $ref: '#/definitions/models.DtleNodeInfo'
        type: array
      job_base_info:
        $ref: '#/definitions/models.JobBaseInfo'
      replicate_do_db:
        items:
          $ref: '#/definitions/models.DataSourceConfig'
        type: array
      replicate_ignore_db:
        items:
          $ref: '#/definitions/models.DataSourceConfig'
        type: array
    type: object
  models.BinlogValidation:
    properties:
      error:
        description: Error is a string version of any error that may have occured
        type: string
      validated:
        type: boolean
    type: object
  models.BufferStat:
    properties:
      applier_tx_queue_size:
        type: integer
      binlog_event_queue_size:
        type: integer
      extractor_tx_queue_size:
        type: integer
      send_by_size_full:
        type: integer
      send_by_timeout:
        type: integer
    type: object
  models.ButtonItem:
    properties:
      action:
        type: string
      text_cn:
        type: string
      text_en:
        type: string
      uri:
        type: string
    type: object
  models.CaptchaRespV2:
    properties:
      data_scheme:
        type: string
      id:
        type: string
      message:
        type: string
    type: object
  models.Configuration:
    properties:
      dst_config:
        $ref: '#/definitions/models.DstConfig'
      fail_over:
        type: boolean
      retry_times:
        type: integer
      src_config:
        $ref: '#/definitions/models.SrcConfig'
    type: object
  models.ConnectionInfo:
    properties:
      dst_data_base:
        $ref: '#/definitions/models.DatabaseConnectionConfig'
      dst_kafka:
        $ref: '#/definitions/models.KafkaDestTaskConfig'
      src_data_base:
        $ref: '#/definitions/models.DatabaseConnectionConfig'
    type: object
  models.ConnectionRespV2:
    properties:
      message:
        type: string
    type: object
  models.ConnectionValidation:
    properties:
      error:
        description: Error is a string version of any error that may have occured
        type: string
      validated:
        type: boolean
    type: object
  models.CreateOrUpdateMysqlToKafkaJobParamV2:
    properties:
      dest_task:
        $ref: '#/definitions/models.KafkaDestTaskConfig'
      failover:
        description: failover default:true
        example: true
        type: boolean
      is_password_encrypted:
        type: boolean
      job_id:
        type: string
      retry:
        type: integer
      src_task:
        $ref: '#/definitions/models.SrcTaskConfig'
      task_step_name:
        type: string
    required:
    - dest_task
    - job_id
    - src_task
    type: object
  models.CreateOrUpdateMysqlToKafkaJobRespV2:
    properties:
      dest_task:
        $ref: '#/definitions/models.KafkaDestTaskConfig'
      eval_create_index:
        type: integer
      failover:
        description: failover default:true
        example: true
        type: boolean
      is_password_encrypted:
        type: boolean
      job_id:
        type: string
      job_modify_index:
        type: integer
      message:
        type: string
      retry:
        type: integer
      src_task:
        $ref: '#/definitions/models.SrcTaskConfig'
      task_step_name:
        type: string
    required:
    - dest_task
    - job_id
    - src_task
    type: object
  models.CreateOrUpdateMysqlToMysqlJobParamV2:
    properties:
      dest_task:
        $ref: '#/definitions/models.DestTaskConfig'
      failover:
        example: true
        type: boolean
      is_password_encrypted:
        type: boolean
      job_id:
        type: string
      retry:
        type: integer
      reverse:
        type: boolean
      src_task:
        $ref: '#/definitions/models.SrcTaskConfig'
      task_step_name:
        type: string
    required:
    - dest_task
    - job_id
    - src_task
    type: object
  models.CreateOrUpdateMysqlToMysqlJobRespV2:
    properties:
      dest_task:
        $ref: '#/definitions/models.DestTaskConfig'
      eval_create_index:
        type: integer
      failover:
        example: true
        type: boolean
      is_password_encrypted:
        type: boolean
      job_id:
        type: string
      job_modify_index:
        type: integer
      message:
        type: string
      retry:
        type: integer
      reverse:
        type: boolean
      src_task:
        $ref: '#/definitions/models.SrcTaskConfig'
      task_step_name:
        type: string
    required:
    - dest_task
    - job_id
    - src_task
    type: object
  models.CreateRoleReqV2:
    properties:
      authority:
        type: string
      name:
        type: string
      operation_object_type:
        type: string
      operation_users:
        items:
          type: string
        type: array
      tenant:
        type: string
    type: object
  models.CreateRoleRespV2:
    properties:
      message:
        type: string
    type: object
  models.CreateUserReqV2:
    properties:
      pass_word:
        type: string
      remark:
        type: string
      role:
        type: string
      tenant:
        type: string
      username:
        type: string
    required:
    - pass_word
    - role
    - tenant
    - username
    type: object
  models.CreateUserRespV2:
    properties:
      message:
        type: string
    type: object
  models.CurrentCoordinates:
    properties:
      file:
        type: string
      gtid_set:
        type: string
      position:
        type: integer
      read_master_log_pos:
        type: integer
      relay_master_log_file:
        type: string
      retrieved_gtid_set:
        type: string
    type: object
  models.CurrentUserResp:
    properties:
      current_user:
        $ref: '#/definitions/common.User'
      message:
        type: string
    type: object
  models.DataSourceConfig:
    properties:
      table_schema:
        type: string
      table_schema_regex:
        type: string
      table_schema_rename:
        type: string
      tables:
        items:
          $ref: '#/definitions/models.TableConfig'
        type: array
    type: object
  models.DatabaseConnectionConfig:
    properties:
      database_type:
        type: string
      host:
        type: string
      password:
        type: string
      port:
        type: integer
      service_name:
        type: string
      user:
        type: string
    required:
    - database_type
    - host
    - password
    - port
    - user
    type: object
  models.DelayCount:
    properties:
      num:
        type: integer
      time:
        type: integer
    type: object
  models.DeleteJobRespV2:
    properties:
      message:
        type: string
    type: object
  models.DeleteRoleRespV2:
    properties:
      message:
        type: string
    type: object
  models.DeleteUserRespV2:
    properties:
      message:
        type: string
    type: object
  models.DestTaskConfig:
    properties:
      connection_config:
        $ref: '#/definitions/models.DatabaseConnectionConfig'
      database_type:
        type: string
      mysql_dest_task_config:
        $ref: '#/definitions/models.MysqlDestTaskConfig'
      node_id:
        type: string
      task_name:
        type: string
    required:
    - connection_config
    - task_name
    type: object
  models.DstConfig:
    properties:
      mysql_dest_task_config:
        $ref: '#/definitions/models.MysqlDestTaskConfig'
    type: object
  models.DtleNodeInfo:
    properties:
      data_source:
        type: string
      node_addr:
        type: string
      node_id:
        type: string
      source:
        type: string
    type: object
  models.DumpProgress:
    properties:
      exec_row_count:
        type: integer
      total_row_count:
        type: integer
    type: object
  models.GetTaskProgressRespV2:
    properties:
      message:
        type: string
      tasks_status:
        $ref: '#/definitions/models.TaskProgress'
    type: object
  models.GetUserLoginResV2:
    properties:
      data:
        $ref: '#/definitions/models.UserLoginResV2'
      message:
        type: string
    type: object
  models.GtidModeValidation:
    properties:
      error:
        description: Error is a string version of any error that may have occured
        type: string
      validated:
        type: boolean
    type: object
  models.JobBaseInfo:
    properties:
      delay:
        type: integer
      dump_progress:
        $ref: '#/definitions/models.DumpProgress'
      job_create_time:
        type: string
      job_id:
        type: string
      job_status:
        type: string
      job_steps:
        items:
          $ref: '#/definitions/common.JobStep'
        type: array
      subscription_topic:
        type: string
    type: object
  models.JobListRespV2:
    properties:
      jobs:
        items:
          $ref: '#/definitions/common.JobListItemV2'
        type: array
      message:
        type: string
    type: object
  models.JobPositionResp:
    properties:
      message:
        type: string
      position:
        type: string
    type: object
  models.KafkaDestTaskConfig:
    properties:
      kafka_broker_addrs:
        example:
        - 127.0.0.1:9092
        items:
          type: string
        type: array
      kafka_topic:
        type: string
      message_group_max_size:
        type: integer
      message_group_timeout:
        type: integer
      node_id:
        type: string
      task_name:
        type: string
    required:
    - kafka_broker_addrs
    - kafka_topic
    - task_name
    type: object
  models.ListActionRespV2:
    properties:
      authority:
        items:
          $ref: '#/definitions/models.MenuItem'
        type: array
      message:
        type: string
    type: object
  models.ListColumnsRespV2:
    properties:
      columns:
        items:
          type: string
        type: array
      message:
        type: string
    type: object
  models.ListSchemasRespV2:
    properties:
      message:
        type: string
      schemas:
        items:
          $ref: '#/definitions/models.SchemaItem'
        type: array
    type: object
  models.LoginWithoutVerifyCodeReqV2:
    properties:
      password:
        example: "123456"
        type: string
      tenant:
        example: test
        type: string
      username:
        example: test
        type: string
    required:
    - password
    - tenant
    - username
    type: object
  models.MenuItem:
    properties:
      admin_only:
        type: boolean
      id:
        type: integer
      menu_level:
        type: integer
      menu_url:
        type: string
      name:
        type: string
      operations:
        items:
          $ref: '#/definitions/models.ButtonItem'
        type: array
      parent_id:
        type: integer
      text_cn:
        type: string
      text_en:
        type: string
    type: object
  models.MysqlDestTaskConfig:
    properties:
      bulk_insert1:
        type: integer
      bulk_insert2:
        type: integer
      dependency_history_size:
        type: integer
      parallel_workers:
        type: integer
      set_gtid_next:
        type: boolean
      use_my_sql_dependency:
        type: boolean
    type: object
  models.MysqlSrcTaskConfig:
    properties:
      auto_gtid:
        type: boolean
      binlog_relay:
        type: boolean
      dump_entry_limit:
        type: integer
      expand_syntax_support:
        type: boolean
      gtid:
        type: string
      wait_on_job:
        type: string
    type: object
  models.MysqlTaskValidationReport:
    properties:
      binlog_validation:
        $ref: '#/definitions/models.BinlogValidation'
      connection_validation:
        $ref: '#/definitions/models.ConnectionValidation'
      gtid_mode_validation:
        $ref: '#/definitions/models.GtidModeValidation'
      privileges_validation:
        $ref: '#/definitions/models.PrivilegesValidation'
      server_id_validation:
        $ref: '#/definitions/models.ServerIDValidation'
      task_name:
        type: string
    type: object
  models.MysqlToKafkaJobDetailRespV2:
    properties:
      basic_task_profile:
        $ref: '#/definitions/models.BasicTaskProfile'
      message:
        type: string
      task_logs:
        items:
          $ref: '#/definitions/models.TaskLog'
        type: array
    type: object
  models.MysqlToMysqlJobDetailRespV2:
    properties:
      basic_task_profile:
        $ref: '#/definitions/models.BasicTaskProfile'
      message:
        type: string
      task_logs:
        items:
          $ref: '#/definitions/models.TaskLog'
        type: array
    type: object
  models.NatsMessageStatistics:
    properties:
      in_bytes:
        type: integer
      in_messages:
        type: integer
      out_bytes:
        type: integer
      out_messages:
        type: integer
      reconnects:
        type: integer
    type: object
  models.NodeListItemV2:
    properties:
      datacenter:
        type: string
      dtle_version:
        type: string
      leader:
        type: boolean
      member:
        type: boolean
      node_address:
        type: string
      node_id:
        type: string
      node_name:
        type: string
      node_status:
        type: string
      node_status_description:
        type: string
      nomad_version:
        type: string
    type: object
  models.NodeListRespV2:
    properties:
      message:
        type: string
      nodes:
        items:
          $ref: '#/definitions/models.NodeListItemV2'
        type: array
    type: object
  models.OracleSrcTaskConfig:
    properties:
      scn:
        type: integer
    type: object
  models.PauseJobRespV2:
    properties:
      message:
        type: string
    type: object
  models.PrivilegesValidation:
    properties:
      error:
        description: Error is a string version of any error that may have occured
        type: string
      validated:
        type: boolean
    type: object
  models.ResetPasswordReqV2:
    properties:
      current_user_password:
        type: string
      password:
        type: string
      tenant:
        type: string
      username:
        type: string
    required:
    - current_user_password
    - password
    - tenant
    - username
    type: object
  models.ResetPasswordRespV2:
    properties:
      message:
        type: string
    type: object
  models.ResumeJobRespV2:
    properties:
      message:
        type: string
    type: object
  models.ReverseConfig:
    properties:
      dest_user:
        type: string
      dst_pwd:
        type: string
      is_mysql_password_encrypted:
        type: boolean
      src_pwd:
        type: string
      src_user:
        type: string
    type: object
  models.ReverseJobReq:
    properties:
      job_id:
        type: string
      reverse_config:
        $ref: '#/definitions/models.ReverseConfig'
    required:
    - job_id
    type: object
  models.ReverseJobResp:
    properties:
      message:
        type: string
    type: object
  models.ReverseStartRespV2:
    properties:
      message:
        type: string
    type: object
  models.RoleListResp:
    properties:
      message:
        type: string
      role_list:
        items:
          $ref: '#/definitions/common.Role'
        type: array
    type: object
  models.SchemaItem:
    properties:
      schema_name:
        type: string
      tables:
        items:
          $ref: '#/definitions/models.TableItem'
        type: array
    type: object
  models.ServerIDValidation:
    properties:
      error:
        description: Error is a string version of any error that may have occured
        type: string
      validated:
        type: boolean
    type: object
  models.SrcConfig:
    properties:
      chunk_size:
        type: integer
      drop_table_if_exists:
        type: boolean
      group_max_size:
        type: integer
      group_timeout:
        type: integer
      mysql_src_task_config:
        $ref: '#/definitions/models.MysqlSrcTaskConfig'
      oracle_src_task_config:
        $ref: '#/definitions/models.OracleSrcTaskConfig'
      repl_chan_buffer_size:
        type: integer
      skip_create_db_table:
        type: boolean
      sql_filter:
        items:
          type: string
        type: array
    type: object
  models.SrcTaskConfig:
    properties:
      chunk_size:
        type: integer
      connection_config:
        $ref: '#/definitions/models.DatabaseConnectionConfig'
      drop_table_if_exists:
        type: boolean
      group_max_size:
        type: integer
      group_timeout:
        type: integer
      mysql_src_task_config:
        $ref: '#/definitions/models.MysqlSrcTaskConfig'
      node_id:
        type: string
      oracle_src_task_config:
        $ref: '#/definitions/models.OracleSrcTaskConfig'
      repl_chan_buffer_size:
        type: integer
      replicate_do_db:
        items:
          $ref: '#/definitions/models.DataSourceConfig'
        type: array
      replicate_ignore_db:
        items:
          $ref: '#/definitions/models.DataSourceConfig'
        type: array
      skip_create_db_table:
        type: boolean
      sql_filter:
        items:
          type: string
        type: array
      task_name:
        type: string
    required:
    - connection_config
    - task_name
    type: object
  models.TableConfig:
    properties:
      column_map_from:
        items:
          type: string
        type: array
      column_map_to:
        items:
          type: string
        type: array
      table_name:
        type: string
      table_regex:
        type: string
      table_rename:
        type: string
      where:
        type: string
    type: object
  models.TableItem:
    properties:
      table_name:
        type: string
    type: object
  models.TaskEvent:
    properties:
      event_type:
        type: string
      message:
        type: string
      setup_error:
        type: string
      time:
        type: string
    type: object
  models.TaskLog:
    properties:
      address:
        type: string
      allocation_id:
        type: string
      node_id:
        type: string
      status:
        type: string
      target:
        type: string
      task_events:
        items:
          $ref: '#/definitions/models.TaskEvent'
        type: array
    type: object
  models.TaskProgress:
    properties:
      ETA:
        type: string
      backlog:
        type: string
      buffer_status:
        $ref: '#/definitions/models.BufferStat'
      current_coordinates:
        $ref: '#/definitions/models.CurrentCoordinates'
      delay_count:
        $ref: '#/definitions/models.DelayCount'
      exec_master_row_count:
        type: integer
      exec_master_tx_count:
        type: integer
      nats_message_status:
        $ref: '#/definitions/models.NatsMessageStatistics'
      progress_PCT:
        type: string
      read_master_row_count:
        type: integer
      read_master_tx_count:
        type: integer
      stage:
        type: string
      throughput_status:
        $ref: '#/definitions/models.ThroughputStat'
      timestamp:
        type: integer
    type: object
  models.TenantListResp:
    properties:
      message:
        type: string
      tenant_list:
        items:
          type: string
        type: array
    type: object
  models.ThroughputStat:
    properties:
      num:
        type: integer
      time:
        type: integer
    type: object
  models.UpdataLogLevelRespV2:
    properties:
      dtle_log_level:
        type: string
      message:
        type: string
    type: object
  models.UpdateRoleReqV2:
    properties:
      authority:
        type: string
      name:
        type: string
      operation_object_type:
        type: string
      operation_users:
        items:
          type: string
        type: array
      tenant:
        type: string
    type: object
  models.UpdateRoleRespV2:
    properties:
      message:
        type: string
    type: object
  models.UpdateUserReqV2:
    properties:
      remark:
        type: string
      role:
        type: string
      tenant:
        type: string
      username:
        type: string
    required:
    - role
    - tenant
    - username
    type: object
  models.UpdateUserRespV2:
    properties:
      message:
        type: string
    type: object
  models.UserListResp:
    properties:
      message:
        type: string
      user_list:
        items:
          $ref: '#/definitions/common.User'
        type: array
    type: object
  models.UserLoginReqV2:
    properties:
      captcha:
        example: "01722"
        type: string
      captcha_id:
        example: Md9kzZQn9xohumhOTc81
        type: string
      password:
        example: "123456"
        type: string
      tenant:
        example: test
        type: string
      username:
        example: test
        type: string
    required:
    - captcha
    - captcha_id
    - password
    - tenant
    - username
    type: object
  models.UserLoginResV2:
    properties:
      token:
        example: this is a jwt token string
        type: string
    type: object
  models.ValidateJobReqV2:
    properties:
      dest_task:
        $ref: '#/definitions/models.DestTaskConfig'
      is_password_encrypted:
        type: boolean
      job_id:
        type: string
      src_task:
        $ref: '#/definitions/models.SrcTaskConfig'
    required:
    - dest_task
    - job_id
    - src_task
    type: object
  models.ValidateJobRespV2:
    properties:
      driver_config_validated:
        description: DriverConfigValidated indicates whether the agent validated the driver
        type: boolean
      job_validation_error:
        type: string
      job_validation_warning:
        type: string
      message:
        type: string
      mysql_task_validation_report:
        description: config
        items:
          $ref: '#/definitions/models.MysqlTaskValidationReport'
        type: array
    type: object
info:
  contact: {}
  description: This is a sample server for dev.
  title: dtle API Docs
  version: "2.0"
paths:
  /v2/database/columns:
    get:
      description: list columns of database source instance.
      operationId: ListDatabaseColumnsV2
      parameters:
      - description: database host
        in: query
        name: host
        required: true
        type: string
      - description: database port
        in: query
        name: port
        required: true
        type: integer
      - description: database user
        in: query
        name: user
        required: true
        type: string
      - description: database password
        in: query
        name: password
        required: true
        type: string
      - description: database_type
        in: query
        name: database_type
        required: true
        type: string
      - description: database service_name
        in: query
        name: service_name
        type: string
      - description: database schema
        in: query
        name: schema
        required: true
        type: string
      - description: database table
        in: query
        name: table
        required: true
        type: string
      - description: database character set
        in: query
        name: character_set
        type: string
      - description: indecate that database password is encrypted or not
        in: query
        name: is_password_encrypted
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListColumnsRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - database
  /v2/database/instance_connection:
    get:
      description: connect to  database instance.
      operationId: ConnectionV2
      parameters:
      - description: database host
        in: query
        name: host
        required: true
        type: string
      - description: database port
        in: query
        name: port
        required: true
        type: integer
      - description: database user
        in: query
        name: user
        required: true
        type: string
      - description: database password
        in: query
        name: password
        required: true
        type: string
      - description: database_type
        in: query
        name: database_type
        required: true
        type: string
      - description: database service_name
        in: query
        name: service_name
        type: string
      - description: indecate that database password is encrypted or not
        in: query
        name: is_password_encrypted
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ConnectionRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - database
  /v2/database/schemas:
    get:
      description: list schemas of database source instance.
      operationId: ListDatabaseSchemasV2
      parameters:
      - description: database_type
        in: query
        name: database_type
        required: true
        type: string
      - description: database host
        in: query
        name: host
        required: true
        type: string
      - description: database port
        in: query
        name: port
        required: true
        type: integer
      - description: database user
        in: query
        name: user
        required: true
        type: string
      - description: database password
        in: query
        name: password
        required: true
        type: string
      - description: database service_name
        in: query
        name: service_name
        type: string
      - description: database character set
        in: query
        name: character_set
        type: string
      - description: indecate that database password is encrypted or not
        in: query
        name: is_password_encrypted
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListSchemasRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - database
  /v2/job/migration/create:
    post:
      consumes:
      - application/json
      description: create migration job.
      operationId: CreateMigrationJobV2
      parameters:
      - description: migration job config
        in: body
        name: migration_job_config
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrUpdateMysqlToMysqlJobParamV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateOrUpdateMysqlToMysqlJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/migration/delete:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: delete migration job.
      operationId: DeleteMigrationJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/migration/detail:
    get:
      description: get migration job detail.
      operationId: GetMigrationJobDetailV2
      parameters:
      - description: job id
        in: query
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MysqlToMysqlJobDetailRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/migration/pause:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: pause migration job.
      operationId: PauseMigrationJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PauseJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/migration/resume:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: resume migration job.
      operationId: ResumeMigrationJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResumeJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/migration/reverse:
    post:
      consumes:
      - application/json
      description: reverse migration Job
      operationId: ReverseMigrationJobV2
      parameters:
      - description: reverse config config
        in: body
        name: reverse_config
        required: true
        schema:
          $ref: '#/definitions/models.ReverseJobReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReverseJobResp'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/migration/reverse_start:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Start Reverse Job.
      operationId: ReverseStartMigrationJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReverseStartRespV2'
      security:
      - ApiKeyAuth: []
      summary: start reverse-init job
      tags:
      - job
  /v2/job/migration/update:
    post:
      consumes:
      - application/json
      description: update migration job.
      operationId: UpdateMigrationJobV2
      parameters:
      - description: migration job config
        in: body
        name: migration_job_config
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrUpdateMysqlToMysqlJobParamV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateOrUpdateMysqlToMysqlJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/position:
    get:
      description: get src task current gtid/scn.
      operationId: GetJobPositionV2
      parameters:
      - description: job id
        in: query
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JobPositionResp'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/reverse_start:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Finish Job.
      operationId: ReverseStartJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReverseStartRespV2'
      security:
      - ApiKeyAuth: []
      summary: start reverse-init job
      tags:
      - job
  /v2/job/subscription/create:
    post:
      consumes:
      - application/json
      description: create subscription job.
      operationId: CreateSubscriptionJobV2
      parameters:
      - description: subscription job config
        in: body
        name: subscription_job_config
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrUpdateMysqlToKafkaJobParamV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateOrUpdateMysqlToKafkaJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/subscription/delete:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: delete subscription job.
      operationId: DeleteSubscriptionJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/subscription/detail:
    get:
      description: get subscription job detail.
      operationId: GetSubscriptionJobDetailV2
      parameters:
      - description: job id
        in: query
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MysqlToKafkaJobDetailRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/subscription/pause:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: pause subscription job.
      operationId: PauseSubscriptionJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PauseJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/subscription/resume:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: resume subscription job.
      operationId: ResumeSubscriptionJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResumeJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/subscription/update:
    post:
      consumes:
      - application/json
      description: update subscription job.
      operationId: CreateOrUpdateSubscriptionJobV2
      parameters:
      - description: subscription job config
        in: body
        name: subscription_job_config
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrUpdateMysqlToKafkaJobParamV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateOrUpdateMysqlToKafkaJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/sync/create:
    post:
      consumes:
      - application/json
      description: create sync job.
      operationId: CreateSyncJobV2
      parameters:
      - description: sync job config
        in: body
        name: sync_job_config
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrUpdateMysqlToMysqlJobParamV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateOrUpdateMysqlToMysqlJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/sync/delete:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: delete sync job.
      operationId: DeleteSyncJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/sync/detail:
    get:
      description: get sync job detail.
      operationId: GetSyncJobDetailV2
      parameters:
      - description: job id
        in: query
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MysqlToMysqlJobDetailRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/sync/pause:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: pause sync job.
      operationId: PauseSyncJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PauseJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/sync/resume:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: resume sync job.
      operationId: ResumeSyncJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResumeJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/sync/reverse:
    post:
      consumes:
      - application/json
      description: reverse sync Job
      operationId: ReverseSyncJobV2
      parameters:
      - description: reverse config config
        in: body
        name: reverse_config
        required: true
        schema:
          $ref: '#/definitions/models.ReverseJobReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReverseJobResp'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/job/sync/reverse_start:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Start Reverse Job.
      operationId: ReverseStartSyncJobV2
      parameters:
      - description: job id
        in: formData
        name: job_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReverseStartRespV2'
      security:
      - ApiKeyAuth: []
      summary: start reverse-init job
      tags:
      - job
  /v2/job/sync/update:
    post:
      consumes:
      - application/json
      description: update sync job.
      operationId: UpdateSyncJobV2
      parameters:
      - description: sync job config
        in: body
        name: sync_job_config
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrUpdateMysqlToMysqlJobParamV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateOrUpdateMysqlToMysqlJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/jobs/migration:
    get:
      description: get job list.
      operationId: MigrationJobListV2
      parameters:
      - description: filter job id
        in: query
        name: filter_job_id
        type: string
      - description: filter job src ip
        in: query
        name: filter_job_src_ip
        type: string
      - description: filter job src port
        in: query
        name: filter_job_src_port
        type: string
      - description: filter job dest ip
        in: query
        name: filter_job_dest_ip
        type: string
      - description: filter job dest port
        in: query
        name: filter_job_dest_port
        type: string
      - description: filter job status
        in: query
        name: filter_job_status
        type: string
      - default: job_create_time
        description: order by
        enum:
        - job_create_time
        in: query
        name: order_by
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JobListRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/jobs/subscription:
    get:
      description: get subscription job list.
      operationId: SubscriptionJobListV2
      parameters:
      - description: filter job id
        in: query
        name: filter_job_id
        type: string
      - description: filter job src ip
        in: query
        name: filter_job_src_ip
        type: string
      - description: filter job src port
        in: query
        name: filter_job_src_port
        type: string
      - description: filter job dest ip
        in: query
        name: filter_job_dest_ip
        type: string
      - description: filter job dest port
        in: query
        name: filter_job_dest_port
        type: string
      - description: filter job status
        in: query
        name: filter_job_status
        type: string
      - default: job_create_time
        description: order by
        enum:
        - job_create_time
        in: query
        name: order_by
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JobListRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/jobs/sync:
    get:
      description: get sync job list.
      operationId: SyncJobListV2
      parameters:
      - description: filter job id
        in: query
        name: filter_job_id
        type: string
      - description: filter job src ip
        in: query
        name: filter_job_src_ip
        type: string
      - description: filter job src port
        in: query
        name: filter_job_src_port
        type: string
      - description: filter job dest ip
        in: query
        name: filter_job_dest_ip
        type: string
      - description: filter job dest port
        in: query
        name: filter_job_dest_port
        type: string
      - description: filter job status
        in: query
        name: filter_job_status
        type: string
      - default: job_create_time
        description: order by
        enum:
        - job_create_time
        in: query
        name: order_by
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JobListRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - job
  /v2/log/level:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: reload log level dynamically.
      operationId: UpdateLogLevelV2
      parameters:
      - description: dtle log level
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        in: formData
        name: dtle_log_level
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdataLogLevelRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - log
  /v2/login:
    post:
      description: user login
      operationId: loginV2
      parameters:
      - description: user login request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginReqV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserLoginResV2'
      summary: user loginV2
      tags:
      - user
  /v2/login/captcha:
    post:
      description: create base64Captcha
      operationId: CaptchaV2
      parameters:
      - description: captcha type
        enum:
        - default
        - audio
        in: formData
        name: captcha_type
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CaptchaRespV2'
      summary: create base64Captcha
      tags:
      - user
  /v2/loginWithoutVerifyCode:
    post:
      description: user login Without Verify Code
      operationId: LoginWithoutVerifyCodeV2
      parameters:
      - description: user login request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginWithoutVerifyCodeReqV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserLoginResV2'
      summary: user LoginWithoutVerifyCodeV2
      tags:
      - user
  /v2/monitor/task:
    get:
      description: get progress of tasks within an allocation.
      operationId: GetTaskProgressV2
      parameters:
      - description: allocation id
        in: query
        name: allocation_id
        required: true
        type: string
      - description: task name
        in: query
        name: task_name
        required: true
        type: string
      - description: nomad_http_address is the http address of the nomad that the target dtle is running with. ignore it if you are not sure what to provide
        in: query
        name: nomad_http_address
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetTaskProgressRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - monitor
  /v2/mysql/columns:
    get:
      description: list columns of mysql source instance.
      operationId: ListMysqlColumnsV2
      parameters:
      - description: mysql host
        in: query
        name: mysql_host
        required: true
        type: string
      - description: mysql port
        in: query
        name: mysql_port
        required: true
        type: string
      - description: mysql user
        in: query
        name: mysql_user
        required: true
        type: string
      - description: mysql password
        in: query
        name: mysql_password
        required: true
        type: string
      - description: mysql schema
        in: query
        name: mysql_schema
        required: true
        type: string
      - description: mysql table
        in: query
        name: mysql_table
        required: true
        type: string
      - description: mysql character set
        in: query
        name: mysql_character_set
        type: string
      - description: indecate that mysql password is encrypted or not
        in: query
        name: is_mysql_password_encrypted
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListColumnsRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - mysql
  /v2/mysql/instance_connection:
    get:
      description: connect to  mysql instance.
      operationId: MySQLConnectionV2
      parameters:
      - description: mysql host
        in: query
        name: mysql_host
        required: true
        type: string
      - description: mysql port
        in: query
        name: mysql_port
        required: true
        type: string
      - description: mysql user
        in: query
        name: mysql_user
        required: true
        type: string
      - description: mysql password
        in: query
        name: mysql_password
        required: true
        type: string
      - description: indecate that mysql password is encrypted or not
        in: query
        name: is_mysql_password_encrypted
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ConnectionRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - mysql
  /v2/mysql/schemas:
    get:
      description: list schemas of mysql source instance.
      operationId: ListMysqlSchemasV2
      parameters:
      - description: mysql host
        in: query
        name: mysql_host
        required: true
        type: string
      - description: mysql port
        in: query
        name: mysql_port
        required: true
        type: string
      - description: mysql user
        in: query
        name: mysql_user
        required: true
        type: string
      - description: mysql password
        in: query
        name: mysql_password
        required: true
        type: string
      - description: mysql character set
        in: query
        name: mysql_character_set
        type: string
      - description: indecate that mysql password is encrypted or not
        in: query
        name: is_mysql_password_encrypted
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListSchemasRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - mysql
  /v2/nodes:
    get:
      description: get node list.
      operationId: NodeListV2
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NodeListRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - node
  /v2/role/create:
    post:
      consumes:
      - application/json
      description: create Role.
      operationId: CreateRoleV2
      parameters:
      - description: Role info
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/models.CreateRoleReqV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateRoleRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - Role
  /v2/role/delete:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: delete Role.
      operationId: DeleteRoleV2
      parameters:
      - description: tenant
        in: formData
        name: tenant
        required: true
        type: string
      - description: role name
        in: formData
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteRoleRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - Role
  /v2/role/list:
    get:
      description: get role list.
      operationId: RoleListV2
      parameters:
      - description: filter tenant
        in: query
        name: filter_tenant
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoleListResp'
      security:
      - ApiKeyAuth: []
      tags:
      - Role
  /v2/role/update:
    post:
      consumes:
      - application/json
      description: update Role info.
      operationId: UpdateRoleV2
      parameters:
      - description: Role info
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRoleReqV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateRoleRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - Role
  /v2/tenant/list:
    get:
      description: get tenant list.
      operationId: TenantListV2
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TenantListResp'
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /v2/user/create:
    post:
      consumes:
      - application/json
      description: create user.
      operationId: CreateUserV2
      parameters:
      - description: user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserReqV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateUserRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /v2/user/current_user:
    get:
      description: get current user.
      operationId: GetCurrentUserV2
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CurrentUserResp'
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /v2/user/delete:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: delete user.
      operationId: DeleteUserV2
      parameters:
      - description: tenant
        in: formData
        name: tenant
        required: true
        type: string
      - description: user name
        in: formData
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteUserRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /v2/user/list:
    get:
      description: get user list.
      operationId: UserListV2
      parameters:
      - description: filter user name
        in: query
        name: filter_username
        type: string
      - description: filter tenant
        in: query
        name: filter_tenant
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResp'
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /v2/user/list_action:
    get:
      description: list user action.
      operationId: ListActionV2
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListActionRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /v2/user/reset_password:
    post:
      consumes:
      - application/json
      description: reset user password.
      operationId: ResetPasswordV2
      parameters:
      - description: reset user password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordReqV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResetPasswordRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /v2/user/update:
    post:
      consumes:
      - application/json
      description: update user info.
      operationId: UpdateUserV2
      parameters:
      - description: user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserReqV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateUserRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /v2/validation/job:
    post:
      consumes:
      - application/json
      description: validate job config.
      operationId: ValidateJobV2
      parameters:
      - description: validate job config
        in: body
        name: job_config
        required: true
        schema:
          $ref: '#/definitions/models.ValidateJobReqV2'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ValidateJobRespV2'
      security:
      - ApiKeyAuth: []
      tags:
      - validation
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
